%%cu
#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <stdio.h>

__global__ void addKernel(int* c, const int* a, int size) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < size) {
        c[i] = -a[i];
    }
}

// Helper function for using CUDA to add vectors in parallel.
void addWithCuda(int* c, const int* a, int size) {
    int* dev_a = nullptr;
    int* dev_c = nullptr;

    // Allocate GPU buffers for two vectors (one input, one output)
    cudaMalloc((void**)&dev_c, size * sizeof(int));
    cudaMalloc((void**)&dev_a, size * sizeof(int));

    // Copy input vectors from host memory to GPU buffers.
    cudaMemcpy(dev_a, a, size * sizeof(int), cudaMemcpyHostToDevice);

    // Launch a kernel on the GPU with one thread for each element.
    // 2 is number of computational blocks and (size + 1) / 2 is a number of threads in a block
    addKernel<<<2, (size + 1) / 2>>>(dev_c, dev_a, size);
    
    // cudaDeviceSynchronize waits for the kernel to finish, and returns
    // any errors encountered during the launch.
    cudaDeviceSynchronize();

    // Copy output vector from GPU buffer to host memory.
    cudaMemcpy(c, dev_c, size * sizeof(int), cudaMemcpyDeviceToHost);

    cudaFree(dev_c);
    cudaFree(dev_a);
}

int main(int argc, char** argv) {
    const int arraySize = 5;
    const int a[arraySize] = {1,2,3,4,5} ;
    int c[arraySize] = { 0 };

    //#for(int i = 0; i < arraySize; i++)
    //#{
        //#fflush(stdin);
        //#printf("ingrese el elemento de la matriz: \n");
        //#fflush(stdin);
        //#scanf(" %d \n",a[i]);
    //#}

    addWithCuda(c, a, arraySize);

    printf("la matriz de  {%d, %d, %d, %d, %d} es {%d, %d, %d, %d, %d}\n", a[0], a[1], a[2], a[3], a[4], c[0], c[1], c[2], c[3], c[4]);

    cudaDeviceReset();

    return 0;
}